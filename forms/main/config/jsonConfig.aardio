import fonts.fontAwesome;
import win.ui;
/*DSG{{*/
var winform = win.form(text="aardio form";right=938;bottom=638;bgcolor=16777215)
winform.add(
advancedConfig={cls="\forms\main\config\advancedConfig.aardio";left=9;top=20;right=930;bottom=594;bgcolor=16777215;db=1;dl=1;dr=1;dt=1;edge=1;z=12};
btnUpdate={cls="plus";text="Save";left=811;top=602;right=897;bottom=633;align="left";bgcolor=11580047;db=1;dr=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesome');padding={left=22}};iconText='\uF0C7';notify=1;textPadding={left=40};z=6};
btnUpdateNaiveCore={cls="plus";text="Download /update NaÏveProxy Core";left=477;top=7;right=744;bottom=35;align="left";color=3947580;dl=1;dt=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-17;name='FontAwesome');padding={left=18}};iconText='\uF1A0';notify=1;textPadding={left=50};z=17};
btnUpdateRules={cls="plus";text="Download / update routing rules";left=256;top=39;right=506;bottom=67;align="left";color=3947580;dl=1;dt=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-19;name='FontAwesome');padding={left=18}};iconText='\uF041';notify=1;textPadding={left=50};z=15};
btnUpdateSsrCore={cls="plus";text="Download / update SSR Core";left=16;top=39;right=252;bottom=67;align="left";color=3947580;dl=1;dt=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-17;name='FontAwesome');padding={left=18}};iconText='\uF1D8';notify=1;textPadding={left=50};z=16};
btnUpdateV2RayCore={cls="plus";text="Download / update V2Ray Core";left=14;top=8;right=252;bottom=36;align="left";color=3947580;dl=1;dt=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-19;name='FontAwesome');padding={left=18}};iconText='\uF27D';notify=1;textPadding={left=50};z=13};
btnUpdateXrayCore={cls="plus";text="Download / update Xray Core";left=255;top=8;right=482;bottom=36;align="left";color=3947580;dl=1;dt=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-19;name='FontAwesome');padding={left=18}};iconText='\uF0E7';notify=1;textPadding={left=50};z=14};
editCoreConfig={cls="edit";left=9;top=72;right=930;bottom=594;db=1;dl=1;dr=1;dt=1;edge=1;hide=1;hscroll=1;multiline=1;vscroll=1;z=7};
editOutbounds={cls="edit";left=9;top=29;right=930;bottom=594;db=1;dl=1;dr=1;dt=1;edge=1;hscroll=1;multiline=1;vscroll=1;z=8};
lbTip={cls="static";text="You can enter a multi-line server sharing link below, or a JSON array (click on the field name to display the usage instructions):";left=11;top=9;right=899;bottom=29;color=3947580;dl=1;dr=1;dt=1;font=LOGFONT(h=-13);transparent=1;z=9};
navAdvancedConfig={cls="plus";text="Advanced configuration";left=467;top=600;right=613;bottom=632;border={top=1;color=-16744448};db=1;dl=1;z=10};
navCoreConfig={cls="plus";text="Core Configuration(JSON)";left=202;top=600;right=367;bottom=632;border={top=1;color=-16744448};db=1;dl=1;z=3};
navOutbounds={cls="plus";text="Server configuration( JSON )";left=12;top=600;right=206;bottom=632;border={top=1;color=-16744448};db=1;dl=1;z=2};
navRight={cls="plus";left=493;top=600;right=762;bottom=601;bgcolor=16777215;border={top=1;color=-16744448};db=1;dl=1;dr=1;linearGradient=180;z=4};
navSubscription={cls="plus";text="Subscriptions";left=361;top=600;right=462;bottom=632;border={top=1;color=-16744448};db=1;dl=1;notify=1;z=11};
navUwpExemption={cls="plus";text="UWP Application configuration";left=626;top=600;right=795;bottom=632;border={top=1;color=-16744448};db=1;dl=1;notify=1;z=18};
plus={cls="plus";left=9;top=600;right=31;bottom=601;border={top=1;color=-16744448};db=1;dl=1;z=5};
subscription={cls="\forms\main\config\subscription.aardio";left=9;top=19;right=930;bottom=594;bgcolor=16777215;db=1;dl=1;dr=1;dt=1;edge=1;z=1}
)
/*}}*/

import config;
import web.json;
import win.ui.tabs;
var tbs = win.ui.tabs(winform.navOutbounds,winform.navCoreConfig,winform.navSubscription,winform.navAdvancedConfig);
tbs.margin = 0;

tbs.skin({
	foreground={
		active=0xFFFFFFFF;
		default=0x00FFFFFF;
		hover=0xFFCCCCCC;
	};
	checked={
		foreground={ 
			default=0x00FFFFFF; 
		};
		border = { 
			default = {left=1;right=1;bottom=1;color=0xFF008000} 
		}; 
	}
});

tbs.onSelchange = function(idx,strip,form){
    winform.btnUpdateSsrCore.hide = idx!=2;
	winform.btnUpdateV2RayCore.hide = idx!=2;
	winform.btnUpdateXrayCore.hide = idx!=2;
	winform.btnUpdateRules.hide = idx!=2;
	winform.btnUpdateNaiveCore.hide = idx!=2;
	winform.editCoreConfig.hide = idx!=2; 
	winform.editOutbounds.hide = idx!=1;	
	winform.subscription.hide = idx!=3;
	winform.advancedConfig.hide = idx!=4;
	winform.btnUpdate.hide = idx>2;
	winform.lbTip.hide = idx!=1; 
	
	if(idx==1){
		winform.btnUpdate.text = "Update server configuration"; 
	}
	elseif(idx==2) {  
		winform.btnUpdate.text = "Update kernel configuration " 
	}	
	elseif(idx==3) { 
		winform.subscription.loadSubscriptionsOnce();
	}
}
tbs.selIndex = 1;

import style;
winform.btnUpdate.skin(style.primaryButton);
winform.btnUpdate.oncommand = function(id,event){
	winform.btnUpdate.disabledText = {'\uF254';'\uF251';'\uF252';'\uF253';'\uF250'};

	if(tbs.selIndex==1){
		if(..string.match(winform.editOutbounds.text,"%\[\]")){
			var cfg,err = web.json.tryParse(winform.editOutbounds.text);
			if(!cfg){
				winform.editOutbounds.showErrorTip(,string.concat("JSON Syntax errors ",err));
				winform.btnUpdate.disabledText = null;
				return;
			}
			
			if(cfg){
				cfg = v2ray.outbounds.validAll(cfg)	
			}
			config.proxy.outbounds = cfg : ..table.array();
		}
		else {
			var outbounds = v2ray.outbounds.importFromString(winform.editOutbounds.text);
			config.proxy.outbounds = outbounds : ..table.array(); 
			winform.editOutbounds.text = web.json.stringifyArray(outbounds,true,false,true);
		}
		
		config.proxy.save();
		winform.editOutbounds.modified = false;
		publish("uiCommand.restartV2RayCore",cfg)    	
	}
	elseif(tbs.selIndex==2) {
		var cfg,err = web.json.tryParse(winform.editCoreConfig.text);
		if(type(cfg)!==type.table){
			winform.editCoreConfig.showErrorTip(,string.concat("JSON syntax error ",err));
			winform.btnUpdate.disabledText = null;
			return;
		}

		if(cfg.outbounds[[1]][["tag"]]!="proxy"){
			winform.msgErr(`outbounds[0]Must be specified as{"tag":"proxy"}`);
			winform.btnUpdate.disabledText = null;
			return; 
		}

		if(type(cfg.inbounds[[1]][["listen"]])!="string"){
			winform.msgErr(`inbounds[0].listen Must be specified as a SOCKS proxy listening IP or 0.0.0.0`);
			winform.btnUpdate.disabledText = null;
			return; 
		}

		if(type(cfg.inbounds[[1]][["port"]])!="number"){
			winform.msgErr(`inbounds[0].port Must be specified as a SOCKS proxy listening port`);
			winform.btnUpdate.disabledText = null;
			return; 
		} 

		if(type(cfg.inbounds[[2]][["listen"]])!="string"){
			winform.msgErr(`inbounds[1].listen Must be specified as HTTP proxy listening IP or 0.0.0.0`);
			winform.btnUpdate.disabledText = null;
			return; 
		}

		if(type(cfg.inbounds[[2]][["port"]])!="number"){
			winform.msgErr(`inbounds[1].port Must be specified as HTTP proxy listening port`);
			winform.btnUpdate.disabledText = null;
			return; 
		} 
		
		config.core.default = cfg;
		config.core.save();
		
		publish("uiCommand.restartV2RayCore",cfg);   
		publish("config.core.changed");
	} 

	win.delay(500);
	winform.btnUpdate.disabledText = null;
	winform.msgOk("Configuration updated",1200);
}


import v2ray.outbounds;
winform.editOutbounds.enablePopMenu(function(){
	if(tbs.selIndex==1){
		var strEditBounds = string.trim(winform.editOutbounds.text);
		var menu = {
			{ /*---分隔线---*/ };
			{ "Import vmess/vless/trojan/ss links or feeds from the clipboard";
				function(id){ 
					
					var outbounds = v2ray.outbounds.importFromClipboard();
					if(#outbounds){ 
						var json = strEditBounds;
						if( (!#json) || ..string.match(json,"%\[\]")){
							var cfgOutbounds,err = ..table.array();
							if(#json){
								cfgOutbounds,err= web.json.tryParse(strEditBounds);
								if(!cfgOutbounds){
									winform.editOutbounds.showErrorTip(,string.concat("There is a JSON syntax error in the current configuration ",err));
									return;
								}	
							} 
							
							var subscribeUrl = outbounds[1].subscribeUrl;
							if(subscribeUrl){
								for(i=#cfgOutbounds;1;-1){
									var outbound = cfgOutbounds[i] 
									if(outbound.subscribeUrl==url){
										..table.remove(	cfgOutbounds,i );
									}
								}
							}
							
							..table.append(cfgOutbounds,outbounds);
							winform.editOutbounds.text = ..web.json.stringifyArray(cfgOutbounds,true,false,true);
						}
						else {
							var str = v2ray.outbounds.exportSharedLinks(outbounds);
							if(#strEditBounds){
								winform.editOutbounds.text = strEditBounds+ '\r\n' + str;
							}
							else {
								winform.editOutbounds.text = str;
							} 
						}
						
						winform.msgOk("Successfully imported" + #outbounds + "Server, please click [Update Settings] to enable the new configuration.",1200);
						winform.editOutbounds.modified = true;
						winform.editOutbounds.setFocus();
						return; 
					}
		
					winform.msgFrown('Server not imported! \r\nPlease copy the following formatted text (automatically clear the invalid content): \r\n\r\n1, one or more lines (ignore invalid lines) to share the link or server JSON configuration. \r\nSupport vmess://, vless://, ss://, ssr://, trojan://, trojan-go:// and other common sharing links. \r\n\r\n2, a JSON array containing multiple server configurations. \r\n\r\n3, a single http:// or https:// general feed address. \r\nThe feed address supports the direct use of the github project file address (the URL contains the raw or blob directory name). \r\nThe feed can be BASE64 encoded or returned in plain text to the configuration or sharing link specified in the above 1 and 2.')
				} 
			};  
		}
		
		if( (!#strEditBounds) || ..string.match(strEditBounds,"%\[\]")){
			menu[3] = { "Update the subscribe in the current configuration";
				function(id){ 
					var cfg,err = ..table.array();
					
					var json = strEditBounds;
					if(#json){
						cfg,err = web.json.tryParse(strEditBounds);
						if(!cfg){
							winform.editOutbounds.showErrorTip(,string.concat("JSON syntax error ",err));
							return;
						}
					}
						
					var subscribeUrls = {}
					for(i=#cfg;1;-1){
						var outbound = cfg[i] 
						if(outbound.subscribeUrl){
							subscribeUrls[outbound.subscribeUrl] = true;	
						}
					}
					
					if(!table.count(subscribeUrls)){
						import win.clip;
						var clibStr = win.clip.read();
						if( ..string.startWith(clibStr,"http://") || ..string.startWith(clibStr,"https://")  ){
							subscribeUrls[clibStr] = true;
						}
						else {
							winform.msgWarn('The current configuration does not include the server from the subscribe.\nPlease copy the feed URL to the clipboard first!');
							return;
						} 
					}
						
					var count = 0;
					for(url,v in subscribeUrls){ 
						var outbounds = v2ray.outbounds.importFromString(url);
						if(#outbounds){
							for(i=#cfg;1;-1){
								var outbound = cfg[i] 
								if(outbound.subscribeUrl==url){
									..table.remove(	cfg,i );
								}
							}
							
							count = count + #outbounds;
							..table.append(cfg,outbounds);
						}
					}
					
					winform.editOutbounds.text = ..web.json.stringifyArray(cfg,true,false,true);
						
					winform.msgOk("Refreshed successfully" + count + "Server, please click [Update Settings] to enable the new configuration.",1200);
					winform.editOutbounds.modified = true;
					winform.editOutbounds.setFocus();
					return;   
				} 
			};
		}
		
		if(..string.match(strEditBounds,"%\[\]")){	
			menu[4] = {}	
			menu[5] = { "Convert to vmess, vless, trojan, trojan-go, ss share link";
				function(id){ 
					var cfgOutbouds,err = web.json.tryParse(strEditBounds);
					if(!cfgOutbouds){
						winform.editOutbounds.showErrorTip(,string.concat("JSON syntax error ",err));
						return;
					}
					
					for(i,ob in cfgOutbouds){
						if(ob.subscribeUrl){
							if(!winform.msgAsk('The current configuration includes the feed.\nConverted to a shared link, all servers and feeds will be disassociated.\nPress OK to continue, press Cancel to abort.')){
								return;
							}
							
							break;
						} 
					}
					
					var str = v2ray.outbounds.exportSharedLinks(cfgOutbouds);
					if(str){ 
						winform.editOutbounds.text = str;
						winform.editOutbounds.modified = true;
					} 
				} 
			}; 
			menu[6] = { "Convert to Base64 subscribe";
				function(id){ 
					var cfg,err = web.json.tryParse(strEditBounds);
					if(!cfg){
						winform.editOutbounds.showErrorTip(,string.concat("JSON syntax error ",err));
						return;
					}
		
					var str = v2ray.outbounds.exportSharedLinks(cfg);
					if(str){ 
						import crypt;
						winform.editOutbounds.text = ..crypt.encodeBin(str);
						winform.editOutbounds.modified = true;
					} 
				} 
			};
		}
		elseif( #strEditBounds ) {
			menu[3] = {}
			
			menu[4] = { "Convert to JSON";
				function(id){
					import web.json;
					var outbounds = v2ray.outbounds.importFromString(strEditBounds);
					if(outbounds){ 
						winform.editOutbounds.text = web.json.stringifyArray(outbounds,true,false,true);
						winform.editOutbounds.modified = true;
					} 
				} 
			}; 
		} 
		
		table.push(menu,{ /*---分隔线---*/ });
		
		table.push(menu,{ "Open configuration file (JSON)";
			function(id){
				import fsys.dlg;
				var path = fsys.dlg.open("*.json|*.json||","Open JSON file",,winform)
				if(path){
					winform.editOutbounds.text = string.load(path);
					winform.editOutbounds.modified = true;
				}
			} 
		}); 
		
		table.push(menu,{ "Save as configuration file (JSON)";
			function(id){
				import fsys.dlg;
				var path = fsys.dlg.save("*.json|*.json||","Save as json file",,winform)
				if(path){
					var str = web.json.stringifyArray( 
						config.proxy.outbounds,true,false,true
					)
					
					string.save(path,str )
				}
			} 
		}); 
		
		table.push(menu,{ "Save as default server list (JSON)";
			function(id){
				var str = web.json.stringifyArray( 
					config.proxy.outbounds,true,false,true
				)
				
				string.save("/v2ray-core/winXray-default-servers.json",str );
				winform.msgOk("Saved as the default server list /v2ray-core/winXray-default-servers.json",1000)
			} 
		}); 
				
		table.push(menu,{ /*---分隔线---*/ });
		if(winform.editOutbounds.modified){
			table.push(menu,{ "Revert to the current server list (JSON)";
				function(id){
					winform.btnUpdate.disabledText = {'\uF254';'\uF251';'\uF252';'\uF253';'\uF250'}
					winform.editOutbounds.text = web.json.stringifyArray( 
						config.proxy.outbounds,true,false,true
					)
					winform.editOutbounds.modified = false;
					
					win.delay(500);
					winform.btnUpdate.disabledText = null;
				} 
			}); 
		}
		
		table.push(menu,{ "Reset to the default server list (JSON)";
			function(id){
				winform.btnUpdate.disabledText = {'\uF254';'\uF251';'\uF252';'\uF253';'\uF250'}
				..config.__loadDefaultOutbounds();
				winform.editOutbounds.modified = false;
				publish("uiCommand.restartV2RayCore",cfg);
				
				winform.btnUpdate.disabledText = null;
			} 
		}); 
		
		table.push(menu,{ "Clear server list";
			function(id){
				winform.editOutbounds.text = "[]";
				winform.editOutbounds.modified = true;
			} 
		}); 
		
		if(  ..string.match(winform.editOutbounds.text,"%\[\]")){

		table.push(menu,{ /*---分隔线---*/ });
			table.push(menu,{ "Insert configuration field";{
				{ "Service Agreement:protocol";
					function(id){
						winform.editOutbounds.selText = '"protocol":"vless",'
					} 
				};
				{ "SSH management port:sshPort";
					function(id){
						winform.editOutbounds.selText = '"sshPort":22,'
					} 
				};
				{ "Proxy server address:address";
					function(id){
						winform.editOutbounds.selText = '"address":"",'
					} 
				};
				{ "port:port";
					function(id){
						winform.editOutbounds.selText = '"port":443,'
					} 
				};
				{ "Network protocol:network";
					function(id){
						winform.editOutbounds.selText = '"network":"tcp",'
					} 
				};
				{ "Server password:id";
					function(id){
						winform.editOutbounds.selText = '"id":"",'
					} 
				};
				{ "Encryption:security";
					function(id){
						winform.editOutbounds.selText = '"security":"auto",'
					} 
				};
				{ "Allow to ignore certificates:allowInsecure";
					function(id){
						winform.editOutbounds.selText = '"allowInsecure":true,'
					} 
				};
				{ "TLS server name:sni";
					function(id){
						winform.editOutbounds.selText = '"sni":"",'
					} 
				};
				{ "Enable TLS:tls";
					function(id){
						winform.editOutbounds.selText = '"tls":"tls",'
					} 
				};
				{ "Flow Control:flow";
					function(id){
						winform.editOutbounds.selText = '"flow":"xtls-rprx-direct",'
					} 
				};
				{ "Multiplexed maximum connection:concurrency";
					function(id){
						winform.editOutbounds.selText = '"concurrency":4,'
					} 
				};
		
				{ "obfuscation type:type";
					function(id){
						winform.editOutbounds.selText = '"type":"http",'
					} 
				};
				{ "Remarks:ps";
					function(id){
						winform.editOutbounds.selText = '"ps":"",'
					} 
				};
				{ "Request hostname:host";
					function(id){
						winform.editOutbounds.selText = '"host":"",'
					} 
				};
				{ "Request path:path";
					function(id){
						winform.editOutbounds.selText = '"path":"/",'
					} 
				};
				{ "HTTP request method:httpMethod";
					function(id){
						winform.editOutbounds.selText = '"httpMethod":"GET",'
					} 
				};
				{ "HTTP request header:headers";
					function(id){
						winform.editOutbounds.selText = '"headers":{"method":"GET"},'
					} 
				};
				{ "Bound subscription URL:subscribeUrl";
					function(id){
						winform.editOutbounds.selText = '"subscribeUrl":"https://",'
					} 
				};
				{ "Allow automatic testing and connection:autoConnect";
					function(id){
						winform.editOutbounds.selText = '"autoConnect":false,'
					} 
				};
				{ "Remarks:ps";
					function(id){
						winform.editOutbounds.selText = '"ps":"",'
					} 
				};
			}}); 
		}
		
		return menu;
	} 
})

winform.editCoreConfig.enablePopMenu({ 
	{ /*---分隔线---*/ };
	{ "Reset to default kernel configuration";
		function(id){  
			winform.editCoreConfig.text = ..string.load("\forms\main\config\coreConfigs\default.json") 
			winform.editCoreConfig.msgOk('已Reset to the default kernel configuration. \nPlease click below: "Update Kernel Configuration" to enable the new configuration.',1300)
		} 
	}; 
	{ "Reset the default kernel configuration to enable routing rules";
		function(id){  
			winform.editCoreConfig.text = ..string.load("\forms\main\config\coreConfigs\v2ray.rules.json")
			import v2ray.core.rules;
			var versionTag = v2ray.core.rules.check();
			if(versionTag) winform.editCoreConfig.msgOk('The default kernel configuration has been reset to enable routing rules.\nThe latest version of routing rules data has been downloaded：' + versionTag+ '\n\nPlease click below: "Update Kernel Configuration" to enable the new configuration.',2000)
			else winform.msgOk('The default kernel configuration has been reset to enable routing rules.\nPlease click below: "Update Kernel Configuration" to enable the new configuration.',1300)
		} 
	};  
	{ "Restore to the kernel configuration currently in use";
		function(id){   
			winform.editCoreConfig.text = web.json.stringify( 
				config.core.default,true
			)

			winform.editCoreConfig.msgOk('Has been restored to the kernel configuration currently in use',1300)
		} 
	}; 
} )

subscribe("outbounds.updateConfigJson",function(){
	if(winform.editOutbounds.modified){
		return;
	}
	
	winform.editOutbounds.text = web.json.stringifyArray( 
		config.proxy.outbounds,true,false,true
	)
	
	winform.editOutbounds.modified = false;
} )

winform.editOutbounds.text = web.json.stringifyArray( 
		config.proxy.outbounds,true,false,true
) : "[]"
winform.editOutbounds.modified = false;

subscribe("config.inbounds.changed",function(){
	if(winform.editCoreConfig.modified){
		return;
	}
	
	winform.editCoreConfig.text = web.json.stringify( 
		config.core.default,true
	)
	
	winform.editCoreConfig.modified = false;
} )
winform.editCoreConfig.text = web.json.stringify( 
	config.core.default,true
)

var editOutboundsTip = {
	address = {"Proxy server address";"The value can be a domain name or IP address"};
	alterId = {"Extra ID";"Only used for VMESS protocol, consistent with the server"};
	aid = {"Additional ID(alterId)";"Value, only used for VMESS protocol, consistent with the server"};
	network = {"Transmission protocol (network)";"The optional values ​​are tcp, ws, etc., or you can put the protocol value of SSR"};
	net = {"Transmission Protocol (network)";"Optional values ​​are tcp, ws, etc."};
	type = {"Camouflage type";"The default optional values ​​are none, http, etc., kcp or quic. This field represents header.type, and the optional values ​​are none, srtp, utp, wechat-video, dtls, wireguard"}; 
	ps = {"Remarks";"Remarks"}; 
	tls = {"Whether to enable TLS"; "The optional values ​​are tls, xtls or null. When the vless protocol is omitted, the default value is tls"}; 
	path = {"Request path";"Specify request path for ws, http and other protocols"}; 
	httpMethod = {"HTTP request method";"Used for http protocol to specify the request method"}; 
	headers = {"HTTP request headers";"Used for ws, http and other protocols to specify request headers"}; 
	id = {"password";"server password"}; 
	host = {"Hostname";"Used to specify the hostname in the HTTP, ws and other protocol request headers"}; 
	protocol = {"protocol";"The optional value is one of vmess,vless,shadowsocks,trojan,trojan-go"}; 
	port = {"port";"server port, value"}; 
	security = {"Encryption method";"Can be omitted, the default of vmess protocol is auto, and the default of vless protocol is none"};
	sni = {"TLS server name";"The server name field in the TLS client request, if not specified, the host or address field value will be taken by default."}; 
	flow = {"Flow Control";"Currently only used to select the XTLS algorithm, when omitted, the default value is xtls-rprx-direct"}; 
	obfs = {"obfuscation plug-in";"Optional values: plain,http_simple,http_post,tls1.2_ticket_auth..."};
	obfsParam = {"obfuscation parameter";"obfs_param in SSR"};
	networkParam = {"SSR network protocol parameters";"protocol_param in SSR"};
	concurrency = {"Mux multiplexing: maximum number of concurrent connections"; "minimum value 1, maximum value 1024, special value -1, do not load mux module. By default, winXray automatically sets this value according to the connection protocol."} ;
}
winform.editOutbounds.wndproc = function(hwnd,message,wParam,lParam){
	if(message == 0x202/*_WM_LBUTTONUP*/){
		var lineIndex = winform.editOutbounds.lineFromChar();
		if(lineIndex == winform.editOutbounds.preLineIndex){
			return; 
		}
		winform.editOutbounds.preLineIndex = lineIndex;
		
		var line = winform.editOutbounds.lineText();
		var n,v = string.match(line,`^\s*\"(\w+)\"\s*\:\s*(%"")[\,\s]*$`); 
		if( !n ) n,v = string.match(line,`^\s*\"(\w+)\"\s*\:\s*(\d+)[\,\s]*$`);
		if( !n ) n,v = string.match(line,`^\s*\"(\w+)\"\s*\:\s*\{`);
		if(editOutboundsTip[n]){
			winform.editOutbounds.showInfoTip(editOutboundsTip[n][1],editOutboundsTip[n][2])
		}
	} 
}

winform.editCoreConfig.oncommand = function(id,event){
	if( event === 0x100/*_EN_SETFOCUS*/){
		winform.editCoreConfig.showInfoTip("prompt",'inbounds[0] Must be an inbound SOCKS proxy,\ninbounds[1] Must be an inbound HTTP proxy, \noutbounds[0] Will be converted to an array of outbound servers.')
	}
}

winform.editOutbounds.limit = 0;
winform.editCoreConfig.limit = 0;

winform.btnUpdateSsrCore.skin(style.plainButton)
winform.btnUpdateSsrCore.oncommand = function(id,event){
	winform.btnUpdateSsrCore.disabledText = {'\uF254';'\uF251';'\uF252';'\uF253';'\uF250'};
	
	import v2ray.core.ssr;
	var versionTag = v2ray.core.ssr.updateCore();
	if( versionTag ){
		publish("uiCommand.restartV2RayCore");
		winform.btnUpdateSsrCore.disabledText = null;
		winform.msgOk("SSR Core（ ShadowsocksR-native ） Updated to：" + versionTag,1500)
	}
	else {
		winform.btnUpdateSsrCore.disabledText = null;
	} 	
}

winform.btnUpdateV2RayCore.skin(style.plainButton)
winform.btnUpdateV2RayCore.oncommand = function(id,event){
    winform.btnUpdateXrayCore.disabled = true;
	winform.btnUpdateV2RayCore.disabledText = {'\uF254';'\uF251';'\uF252';'\uF253';'\uF250'};
	
	import v2ray.core;
	var versionTag = v2ray.core.updateCore();
	if( versionTag ){
		publish("uiCommand.restartV2RayCore");
		winform.btnUpdateV2RayCore.disabledText = null;
		winform.msgOk("Downloaded the latest V2Ray Core version：" + versionTag + '\nThe V2Ray core has been switched to: V2Ray Core',1500)
	}
	else {
		winform.btnUpdateV2RayCore.disabledText = null;
		winform.msgErr("V2Ray Core download failed!");
	} 
	
	winform.btnUpdateXrayCore.disabled = false;
}

winform.btnUpdateXrayCore.skin(style.plainButton)
winform.btnUpdateXrayCore.oncommand = function(id,event){
    
    winform.btnUpdateV2RayCore.disabled = true;
	winform.btnUpdateXrayCore.disabledText = {'\uF254';'\uF251';'\uF252';'\uF253';'\uF250'};
	
	import v2ray.core.xray;
	var versionTag = v2ray.core.xray.updateCore();
	if( versionTag ){
		publish("uiCommand.restartV2RayCore");
		winform.btnUpdateXrayCore.disabledText = null;
		winform.msgOk("Downloaded the latest XRay Core version：" + versionTag+ '\nThe V2Ray kernel has been switched to: XRay Core',1500)
	}
	else {
		winform.btnUpdateXrayCore.disabledText = null;
		winform.msgErr("XRay Core download failed!");
	} 
	
	winform.btnUpdateV2RayCore.disabled = false;
}

winform.btnUpdateRules.skin(style.plainButton)
winform.btnUpdateRules.oncommand = function(id,event){
     
	winform.btnUpdateRules.disabledText = {'\uF254';'\uF251';'\uF252';'\uF253';'\uF250'};
	 
	import v2ray.core.rules;
	var versionTag = v2ray.core.rules.update();
	if( versionTag ){
		publish("uiCommand.restartV2RayCore");
		winform.btnUpdateRules.disabledText = null;
		winform.msgOk('The routing rules have been downloaded to the latest version：' + versionTag+ '\nPlease right-click in the configuration editor below, and then click:\n [Reset to enable routing rule default kernel configuration]',2000)
	}
	else {
		winform.btnUpdateRules.disabledText = null;
		winform.msgErr("Failed to download routing rules!");
	}  
}

winform.btnUpdateNaiveCore.skin(style.plainButton)
winform.btnUpdateNaiveCore.oncommand = function(id,event){
	winform.btnUpdateNaiveCore.disabledText = {'\uF254';'\uF251';'\uF252';'\uF253';'\uF250'};
	
	import v2ray.core.naive;
	var versionTag = v2ray.core.naive.updateCore();
	if( versionTag ){
		publish("uiCommand.restartV2RayCore");
		winform.btnUpdateNaiveCore.disabledText = null;
		winform.msgOk("NaÏveProxy Core has been updated to:" + versionTag,1500)
	}
	else {
		winform.btnUpdateNaiveCore.disabledText = null;
		winform.msgErr("NaÏveProxy Core download failed!");
	} 		
}

if(!_WIN10_LATER){
    winform.navUwpExemption.close();
}
else {
	winform.navUwpExemption.skin(style.plainButton)
	winform.navUwpExemption.oncommand = function( id,event ){
		if(_STUDIO_INVOKED){
        	winform.msgErr("Please release as EXE first!");
        	return;
    	}
    	
    	import process;
    	process.execute(io._exepath,"/uwp","runas")
	}
}

winform.navSubscription.skin(
	background = { 
		hover = "/res/images/btn-hover.png";
		focus = "/res/images/btn-focus.jpg";
		active = "/res/images/btn-active.png";
		disabled = "/res/images/btn-disabled.png"; 
	}
)
winform.navSubscription.oncommand = function(id,event){
	
}

winform.show();
win.loopMessage();
return winform;