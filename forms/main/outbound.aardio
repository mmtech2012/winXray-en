import web.json;
import win.dlg.message;
import fonts.fontAwesome;
import win.ui;
/*DSG{{*/
var winform = win.form(text="winXray - 代理服务器配置";right=999;bottom=504;bgcolor=16777215;exmode="none";min=false;mode="popup")
winform.add(
btnAddOutbound={cls="plus";text="New";left=705;top=410;right=808;bottom=446;align="left";bgcolor=14935259;db=1;dr=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesome');padding={left=22}};iconText='\uF067';notify=1;textPadding={left=40};z=17};
btnCopySharedLink={cls="plus";text="copy";left=816;top=470;right=888;bottom=495;align="left";clip=1;db=1;dr=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesome');padding={left=12}};iconText='\uF0C1';notify=1;textPadding={left=30};z=1};
btnGenGuid={cls="plus";text="Generate";left=901;top=257;right=992;bottom=282;align="left";clip=1;dr=1;dt=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesome');padding={left=12}};iconText='\uF0AD';notify=1;textPadding={left=30};z=19};
btnImportSharedLink={cls="plus";text="Import";left=884;top=470;right=969;bottom=495;align="left";clip=1;db=1;dr=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesome');padding={left=12}};iconText='\uF0C1';notify=1;textPadding={left=30};z=21};
btnInsertField={cls="plus";text="Insert more configuration fields";left=10;top=0;right=218;bottom=24;align="left";dl=1;dt=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesome');padding={left=12}};iconText='\uF196 ';notify=1;textPadding={left=30};z=18};
btnSaveOutbound={cls="plus";text="Save";left=826;top=410;right=929;bottom=446;align="left";bgcolor=11580047;db=1;disabled=1;dr=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesome');padding={left=22}};iconText='\uF0C7';notify=1;textPadding={left=40};z=16};
btnUpdateCore={cls="plus";text="Download / update NaÏveProxy Core";left=637;top=61;right=979;bottom=89;align="left";color=3947580;dr=1;dt=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-17;name='FontAwesome');padding={left=18}};iconText='\uF0AB';notify=1;textPadding={left=50};z=23};
cmbNetwork={cls="combobox";left=676;top=94;right=834;bottom=120;dr=1;dt=1;edge=1;items={"tcp";"kcp";"ws";"h2";"quic"};mode="dropdown";z=13};
cmbProtocol={cls="combobox";left=676;top=23;right=834;bottom=49;dr=1;dt=1;edge=1;items={"vmess";"vless";"trojan";"trojan-go";"ssr";"shadowsocks";"naive";"socks";"https";"http"};mode="dropdown";z=12};
cmbSecurity={cls="combobox";left=676;top=138;right=834;bottom=164;dr=1;dt=1;edge=1;items={"auto";"none";"chacha20-poly1305";"aes-128-gcm"};mode="dropdown";z=15};
editAddress={cls="plus";left=656;top=183;right=878;bottom=207;align="left";bgcolor=16777215;border={bottom=1;color=-8355712};dr=1;dt=1;editable="edit";font=LOGFONT(h=-16);textPadding={bottom=1};z=2};
editId={cls="plus";left=647;top=262;right=977;bottom=286;align="left";bgcolor=16777215;border={bottom=1;color=-8355712};clip=1;dr=1;dt=1;editable="edit";font=LOGFONT(h=-16);notify=1;textPadding={right=75;bottom=1};z=20};
editOutbound={cls="edit";left=15;top=25;right=472;bottom=462;db=1;dl=1;dr=1;dt=1;edge=1;font=LOGFONT(h=-13);hscroll=1;multiline=1;vscroll=1;z=14};
editPort={cls="plus";left=656;top=224;right=745;bottom=248;align="left";bgcolor=16777215;border={bottom=1;color=-8355712};dr=1;dt=1;editable="edit";font=LOGFONT(h=-16);textPadding={bottom=1};z=4};
editPs={cls="plus";left=656;top=306;right=878;bottom=330;align="left";bgcolor=16777215;border={bottom=1;color=-8355712};dr=1;dt=1;editable="edit";font=LOGFONT(h=-16);textPadding={bottom=1};z=7};
editSharedLink={cls="plus";left=17;top=472;right=990;bottom=496;align="left";bgcolor=16777215;border={bottom=1;color=-8355712};clip=1;db=1;dl=1;dr=1;font=LOGFONT(h=-16);notify=1;textPadding={right=150;bottom=1};z=22};
lbId={cls="static";text="Login user (id ):";left=492;top=262;right=641;bottom=288;align="right";bgcolor=16777215;dr=1;dt=1;font=LOGFONT(h=-16);transparent=1;z=6};
lbSecurity={cls="static";text="Encryption Method";left=473;top=136;right=642;bottom=163;align="right";bgcolor=16777215;dl=1;dr=1;dt=1;font=LOGFONT(h=-16);transparent=1;z=10};
qrPicture={cls="plus";left=511;top=359;right=607;bottom=455;bgcolor=16777215;db=1;dr=1;notify=1;repeat="scale";z=24};
static={cls="static";text="Server Address";left=481;top=178;right=641;bottom=204;align="right";bgcolor=16777215;dl=1;dr=1;dt=1;font=LOGFONT(h=-16);transparent=1;z=3};
static10={cls="static";text="Proxy Protocol";left=473;top=26;right=641;bottom=52;align="right";bgcolor=16777215;dl=1;dr=1;dt=1;font=LOGFONT(h=-16);transparent=1;z=11};
static2={cls="static";text="Server port";left=560;top=222;right=642;bottom=248;align="right";bgcolor=16777215;dr=1;dt=1;font=LOGFONT(h=-16);transparent=1;z=5};
static4={cls="static";text="Remarks (ps ):";left=498;top=304;right=641;bottom=330;align="right";bgcolor=16777215;dr=1;dt=1;font=LOGFONT(h=-16);transparent=1;z=8};
static5={cls="static";text="Transfer Protocol";left=425;top=97;right=638;bottom=129;align="right";bgcolor=16777215;dl=1;dr=1;dt=1;font=LOGFONT(h=-16);transparent=1;z=9}
)
/*}}*/

winform.outboundConfig = {};
winform.addOutboundField = function(k,v){
	if(winform.outboundConfig[k] !== null){
		return winform.msgInfo("The field already exists, no need to add！"); 
	}
	
	winform.outboundConfig[k] = v;
	winform.editOutbound.text = web.json.stringify(winform.outboundConfig,true,false);
	winform.updateSharedLink();
}

winform.cmbProtocol.onProtocolChange = function(){ 
	var sel = winform.cmbProtocol.selText;
	if(sel=="vmess"){
		winform.cmbSecurity.items = {
			"auto";"none";"chacha20-poly1305";"aes-128-gcm"
		}
		winform.cmbSecurity.selIndex = 1;
		winform.outboundConfig.security = "auto";
		
		winform.cmbNetwork.items = {
			"tcp";"kcp";"h2";"quic";
		}
		winform.cmbNetwork.selIndex = 1;
		winform.outboundConfig.network = "tcp";
		winform.btnUpdateCore.text = 'Download/update： V2Ray Core';
		winform.editId.setCueBannerText("please enter GUID");
	}
	elseif(sel=="shadowsocks"){
		winform.cmbSecurity.items = {
			"aes-256-gcm";"aes-128-gcm";"chacha20-poly1305";"chacha20-ietf-poly1305";"none"
		}

		winform.cmbSecurity.selIndex = 1;
		winform.outboundConfig.security = "aes-256-gcm";
		
		winform.cmbNetwork.items = {"tcp";}
		winform.cmbNetwork.selIndex = 1;
		winform.outboundConfig.network = "tcp";
		winform.btnUpdateCore.text = 'Download/update： V2Ray Core';
		winform.editId.setCueBannerText("Please enter password");
	}
	elseif(sel=="ssr"){
		winform.cmbNetwork.items = {
			"origin";"plain";"auth_sha1_v4";"http_simple";"auth_aes128_sha1";"http_post";"auth_aes128_md5";"http_mix";"auth_chain_a";"tls1.2_ticket_auth";"auth_chain_b";"tls1.2_ticket_fastauth";"auth_chain_c/d/e/f";
		}
		winform.cmbNetwork.selIndex = 1;
		winform.outboundConfig.network = "origin";
		
		winform.cmbSecurity.items = {
			"none";"table";"rc4";"rc4-md5-6";"rc4-md5";"aes-128-cfb";"aes-192-cfb";"aes-256-cfb";"aes-128-ctr";"aes-192-ctr";"aes-256-ctr";"camellia-128-cfb";"camellia-192-cfb";"camellia-256-cfb";"bf-cfb";"cast5-cfb";"des-cfb";"idea-cfb";"rc2-cfb";"seed-cfb";"salsa20";"chacha20";"chacha20-ietf";		
		}

		winform.cmbSecurity.selIndex = 1;
		winform.outboundConfig.security = "none";  
		winform.btnUpdateCore.text = 'Download/update： SSR Core';
		winform.editId.setCueBannerText("Please enter password");
	}
	elseif(sel=="vless"){
		winform.cmbSecurity.items = {
			"none";
		}
		winform.cmbSecurity.selIndex = 1;
		winform.outboundConfig.security = "none";
		
		winform.cmbNetwork.items = {
			"tcp";"kcp";"h2";"quic";
		}
		winform.cmbNetwork.selIndex = 1;
		winform.outboundConfig.network = "tcp";
		winform.btnUpdateCore.text = 'Download/update： Xray Core';
		winform.editId.setCueBannerText("please enter GUID");
	}
	elseif(sel=="naive"){
		winform.cmbNetwork.items = {
			"https";"quic";
		}
		winform.cmbNetwork.selIndex = 1;
		winform.outboundConfig.network = "https";
		
		winform.cmbSecurity.items = {}
		winform.outboundConfig.security = null;  
		 
		winform.btnUpdateCore.text = 'Download/update： NaïveProxy Core';
		winform.editId.setCueBannerText("Please enter Username: Password");
	}
	elseif(sel=="socks"){
		winform.cmbSecurity.items = { }	
		winform.outboundConfig.security = null;
		
		winform.cmbNetwork.items = {"tcp";}
		winform.cmbNetwork.selIndex = 1;
		winform.outboundConfig.network = "tcp";  
		winform.btnUpdateCore.text = 'Download/update: V2Ray Core';
		winform.editId.setCueBannerText("Please enter Username:Password");
	}
	elseif(sel=="http" || sel=="https"){
		winform.cmbSecurity.items = { }	
		winform.outboundConfig.security = null;
		
		winform.cmbNetwork.items = {"tcp";}
		winform.cmbNetwork.selIndex = 1;
		winform.outboundConfig.network = "tcp";  
		winform.btnUpdateCore.text = 'Download/update： V2Ray Core';
		winform.editId.setCueBannerText("Please enter Username:Password");
	}
	else {
		winform.cmbSecurity.items = { }	
		winform.outboundConfig.security = null;
		
		winform.cmbNetwork.items = {"tcp";}
		winform.cmbNetwork.selIndex = 1;
		winform.outboundConfig.network = "tcp";
		winform.btnUpdateCore.text = 'Download/update: V2Ray Core';
		winform.editId.setCueBannerText("Please enter password");
	} 
}

winform.cmbProtocol.onListChange = function(){ 
	winform.cmbProtocol.onProtocolChange(); 

	table.define(winform.outboundConfig);
	winform.outboundConfig.protocol = winform.cmbProtocol.selText;;
	winform.editOutbound.text = web.json.stringify(winform.outboundConfig,true,false);
	winform.updateSharedLink();
}

winform.cmbNetwork.onListChange = function(){ 
	var sel = winform.cmbNetwork.selText;
	winform.outboundConfig.network = sel;
	winform.editOutbound.text = web.json.stringify(winform.outboundConfig,true,false);	
	winform.updateSharedLink();
}

winform.cmbSecurity.onListChange = function(){ 
	var sel = winform.cmbSecurity.selText;
	winform.outboundConfig.security = sel;
	winform.editOutbound.text = web.json.stringify(winform.outboundConfig,true,false);	
	winform.updateSharedLink();
}
	
winform.editId.editBox.onChange = function(){
    if( winform.outboundConfig.id == winform.editId.text ){
    	return;
    }
      
	winform.outboundConfig.id = winform.editId.text; 
	winform.editOutbound.text = web.json.stringify(winform.outboundConfig,true,false);
	winform.updateSharedLink();
}

winform.editPort.editBox.onChange = function(){  
	winform.outboundConfig.port = tonumber(owner.text):443;
	winform.editOutbound.text = web.json.stringify(winform.outboundConfig,true,false);
	winform.updateSharedLink();
}

winform.editAddress.editBox.onChange = function(){  
	winform.outboundConfig.address = owner.text;
	winform.editOutbound.text = web.json.stringify(winform.outboundConfig,true,false);
	winform.updateSharedLink();
}

winform.editPs.editBox.onChange = function(){  
	winform.outboundConfig.ps = owner.text;
	winform.editOutbound.text = web.json.stringify(winform.outboundConfig,true,false);
	winform.updateSharedLink();
}

var editOutboundTip = {
	address = {"Proxy server address ";" value can be domain name or IP address"};
	alterId = {"The additional ID ";" is only used for the VMESS protocol, which is consistent with the server"};
	aid = {"Additional ID (alterId) ";" value, only used for VMESS protocol, it can be consistent with the server"};
	network = {"Transmission protocol (network)";"The optional values are tcp, ws, etc., or you can put the protocol value of SSR"};
	net = {"Transmission protocol (network)";"The optional values are tcp, ws, etc."};
	type = {"Camouflage type ";" The default optional values are none, http, etc., kcp or quic this field represents header.type, optional values are none, srtp, utp, wechat-video, dtls, wireguard"}; 
	ps = {"Remarks ";" Remarks"}; 
	tls = {"Whether to enable TLS";" The optional values are tls, xtls or null. If the vless protocol is omitted, the default value is tls"}; 
	path = {"Request path";"Used for ws, http and other protocols to specify the request path"}; 
	httpMethod = {"HTTP request method ";" is used to specify the request method of http protocol"}; 
	headers = {"HTTP request header ";" is used to specify request headers for ws, http and other protocols"}; 
	id = {"Password ";" server password"}; 
	host = {"Host name ";" is used to specify the host name in the HTTP, ws and other protocol request headers"}; 
	protocol = {"Protocol ";" can be one of vmess,vless,shadowsocks,trojan,trojan-go"}; 
	port = {"Port ";" server port, value"}; 
	security = {"Encryption method ";" can be omitted, vmess protocol defaults to auto, vless protocol defaults to none"};
	sni = {"TLS server name ";" The server name field in the TLS client request, if not specified, the host or address field value is taken by default."}; 
	flow = {"Flow control ";" is currently only used to select the XTLS algorithm, when omitted, the default value is xtls-rprx-direct"}; 
	obfs = {"Obfuscation plugin";"Optional value：plain,http_simple,http_post,tls1.2_ticket_auth ..."}; 
	obfsParam = {"Obfuscation parameter ";" obfs_param in SSR"}; 
	networkParam = {"SSR network protocol parameter";"protocol_param in SSR"}; 
	concurrency = {"Mux multiplexing: the maximum number of concurrent connections ";" the minimum value is 1, the maximum value is 1024, the special value is -1, and the mux module is not loaded. By default, winXray automatically sets this value according to the connection protocol."}; 
}

winform.editOutbound.wndproc = function(hwnd,message,wParam,lParam){
	if(message == 0x202/*_WM_LBUTTONUP*/){
		var lineIndex = winform.editOutbound.lineFromChar();
		if(lineIndex == winform.editOutbound.preLineIndex){
			return; 
		}
		winform.editOutbound.preLineIndex = lineIndex;
		
		var line = winform.editOutbound.lineText();
		var n,v = string.match(line,`^\s*\"(\w+)\"\s*\:\s*(%"")[\,\s]*$`); 
		if( !n ) n,v = string.match(line,`^\s*\"(\w+)\"\s*\:\s*(\d+)[\,\s]*$`);
		if( !n ) n,v = string.match(line,`^\s*\"(\w+)\"\s*\:\s*\{`);
		if(editOutboundTip[n]){
			winform.editOutbound.showInfoTip(editOutboundTip[n][1],editOutboundTip[n][2])
		}
	} 
}
	
import win.ui.menu;
var insertFieldMenu = { 
	{ "Allow to ignore certificates:allowInsecure";
		function(id){
			winform.addOutboundField("allowInsecure",true);
		} 
	};
	{ "TLS server name:sni";
		function(id){
			winform.addOutboundField("sni","");
		} 
	};
	{ "Enable TLS:tls";
		function(id){
			winform.addOutboundField("tls","xtls");
		} 
	};
	{ "Flow Control:flow";
		function(id){
			winform.addOutboundField("flow","xtls-rprx-direct");
		} 
	};
	{ "Multiplexed maximum connection:concurrency";
		function(id){
			winform.addOutboundField("concurrency",4);
		} 
	};

	{ "Camouflage type:type";
		function(id){
			winform.addOutboundField("type","http");
		} 
	};
	{ "Remarks:ps";
		function(id){
			winform.addOutboundField("ps","");
		} 
	};
	{ "Request hostname:host";
		function(id){
			winform.addOutboundField("host","");
		} 
	};
	{ "Request path:path";
		function(id){
			winform.addOutboundField("path","/");
		} 
	};
	{ "HTTP request method:httpMethod";
		function(id){
			winform.addOutboundField("httpMethod","GET");
		} 
	};
	{ "HTTP request header:headers";
		function(id){
			winform.addOutboundField("headers",{method="GET"});
		} 
	};
	{ "SSR obfuscation plugin:obfs";
		function(id){
			winform.addOutboundField("obfs","plain");
		} 
	};
	{ "SSR obfuscation parameters:obfsParam";
		function(id){
			winform.addOutboundField("obfsParam","");
		} 
	};
	{ "SSR network protocol parameters:networkParam";
		function(id){
			winform.addOutboundField("networkParam","");
		} 
	};
	{ "Bound subscription URL:subscribeUrl";
		function(id){
			winform.addOutboundField("subscribeUrl","https://"); 
		} 
	};
	{ "Allow automatic testing and connection:autoConnect";
		function(id){
			winform.addOutboundField("autoConnect",false); 
		} 
	};
	{ "SSH management port:sshPort";
		function(id){
			winform.addOutboundField("sshPort",22);
		} 
	}; 
} 
winform.editOutbound.enablePopMenu({
	{ "Insert configuration field";insertFieldMenu}
})

import style;
winform.btnInsertField.skin(style.transButton)
winform.btnInsertField.oncommand = function(id,event){
	var popInsertFieldMenu = win.ui.popmenu(winform);
	popInsertFieldMenu.addTable(insertFieldMenu);
	
	var x,y,cx,cy = winform.btnInsertField.getPos();
	popInsertFieldMenu.popup(x,y+cy);
}

import win.debounce;
var onEditChange = win.debounce(
	function(){
		var data,err = web.json.tryParse(winform.editOutbound.text); 
		if(!data){
			if(err){
				return winform.editOutbound.showErrorTip("JSON syntax error",err)	
			}
			return;
		}
		
		var editPortChange = winform.editPort.editBox.onChange;
		var editIdChange = winform.editId.editBox.onChange;
		var editAddressChange = winform.editAddress.editBox.onChange;
		var editPsChange = winform.editPs.editBox.onChange;
		
		winform.editPort.editBox.onChange = null;
		winform.editId.editBox.onChange = null;
		winform.editAddress.editBox.onChange = null;
		winform.editPs.editBox.onChange = null;
		
		winform.editPort.text = data.port;
		winform.editId.text = data.id;
		winform.editAddress.text = data.address;
		winform.editPs.text = data.ps;
		
		winform.editPort.editBox.onChange = editPortChange;
		winform.editId.editBox.onChange = editIdChange;
		winform.editAddress.editBox.onChange = editAddressChange;
		winform.editPs.editBox.onChange = editPsChange;
		
		var cmbNetworkChange = winform.cmbNetwork.onListChange;
		var cmbProtocolChange = winform.cmbProtocol.onListChange;
		var cmbSecurityChange = winform.cmbSecurity.onListChange;
		
		winform.cmbNetwork.onListChange = null;
		winform.cmbProtocol.onListChange = null;
		winform.cmbSecurity.onListChange = null;
		
		winform.cmbNetwork.selText = data.network;
		winform.cmbProtocol.selText = data.protocol;
		winform.cmbProtocol.onProtocolChange();
		winform.cmbSecurity.selText = data.security;
		
		winform.cmbNetwork.onListChange = cmbNetworkChange;
		winform.cmbProtocol.onListChange = cmbProtocolChange;
		winform.cmbSecurity.onListChange = cmbSecurityChange;
		
		winform.updateSharedLink();		
	},500
)	

winform.editOutbound.onChange = function(){  
	onEditChange();
}

winform.btnSaveOutbound.oncommand = function(id,event){
	if(!#winform.editAddress.text){
		return winform.editAddress.editBox.showErrorTip("Configuration error "," server address cannot be empty")
	}
	
	if(!#winform.editPort.text){
		return winform.editPort.editBox.showErrorTip("Configuration error "," port cannot be empty")
	}
	
	if( !#winform.editId.text ){
		var protocol = winform.outboundConfig.protocol;
		if((protocol!="socks") && (protocol!="http") && (protocol!="https")){
			return winform.editId.editBox.showErrorTip("Configuration error","The current proxy protocol password cannot be empty")
		}  
	}
	
	table.assign(winform.origOutboundConfig,winform.outboundConfig);
	winform.endModal();
	
	publish("uiCommand.restartV2RayCore");
	publish("outbounds.updateConfigJson");
	
}

import config;
winform.btnAddOutbound.oncommand = function(id,event){
	if(!#winform.editAddress.text){
		return winform.editAddress.editBox.showErrorTip("Configuration error "," server address cannot be empty")
	}
	
	if(!#winform.editPort.text){
		return winform.editPort.editBox.showErrorTip("Configuration error "," port cannot be empty")
	}
	
	if(!#winform.editId.text  ){
		var protocol = winform.outboundConfig.protocol
		if( (protocol!="socks") && (protocol!="http") && (protocol!="https") ){
			return winform.editId.editBox.showErrorTip("Configuration error","The current proxy protocol password cannot be empty")
		}
	}
	
	table.push(config.proxy.outbounds,winform.outboundConfig); 
	winform.endModal();

	publish("uiCommand.restartV2RayCore");
	publish("outbounds.updateConfigJson"); 
}

import win.guid;
winform.btnGenGuid.oncommand = function(id,event){
    var sel = winform.cmbProtocol.selText;
	if(sel=="socks" || sel=="http" || sel=="https" || sel=="naive"  ){
		winform.editId.text = "user:" + string.random(16);
	}
	elseif(sel=="shadowsocks" || sel=="ssr"  ){
		winform.editId.text = string.random(22,"/@0123456abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
	}
	else {
		var guid = win.guid.create();
		winform.editId.text = string.lower( tostring(guid) );	
	}
}
winform.btnGenGuid.skin(style.link)

winform.btnSaveOutbound.skin(style.button)
winform.btnAddOutbound.skin(style.primaryButton)
winform.btnSaveOutbound.disabled = true;

import qrencode.bitmap;
import v2ray.outbounds;
winform.updateSharedLink = function(modified){ 
	var cfg = winform.outboundConfig;
	var link = "";
	 
	if(#cfg.address && (cfg.port!==null) && #cfg.protocol){
		link = v2ray.outbounds.exportSharedLinks({winform.outboundConfig});
	}
	
	winform.editSharedLink.text = link;
	
	if(#link){ 
		var qrBmp = qrencode.bitmap(link,0,0);
		if(qrBmp){ 
			winform.qrPicture.setBackground(qrBmp.copyBitmap(winform.qrPicture.width));   
		} 
	}
}

import win.clip;
winform.btnImportSharedLink.skin(style.link);
winform.btnImportSharedLink.oncommand = function(id,event){
	var str = ..win.clip.read();
	if(str){   
		var outbounds = v2ray.outbounds.importFromString(str);
		if(#outbounds){
			var cfg = winform.outboundConfig;
			table.clear(cfg);
			table.assign(cfg,outbounds[1]);
			
			winform.editOutbound.text = web.json.stringify(winform.outboundConfig,true,false);
			onEditChange();
	
			winform.msgOk("Server successfully imported",1000); 
			return; 
		}
	}

	winform.msgFrown('Server not imported! \r\nPlease copy the following formatted text (automatically clear the invalid content):\r\n\r\n1, share link or server JSON configuration. \r\nSupport vmess://, vless://, ss://, ssr://, trojan://, trojan-go:// and other common sharing links. \r\n\r\n2. The JSON array of the server configuration supports winXray format and general format JSON. \r\nOther BASE64 encoding or plain text return to the configuration or sharing link specified in the above 1 and 2.')
}
 
winform.btnCopySharedLink.skin(style.link)
winform.btnCopySharedLink.oncommand = function(id,event){
	var lnk = winform.editSharedLink.text;
	if(!#lnk){
		winform.msgErr("Sharing link cannot be empty",1500);
	}
	else {
		win.clip.write(lnk);
		winform.msgOk("Share link has been copied to clipboard",1500);
	} 	
}


winform.setOutboundConfig = function(cfg){
    winform.cmbProtocol.selText = cfg.protocol;
	winform.cmbProtocol.onListChange();
	
	winform.btnAddOutbound.skin(style.button);
	winform.btnSaveOutbound.skin(style.primaryButton);
	winform.btnSaveOutbound.disabled = false;

	winform.origOutboundConfig = cfg;
	winform.outboundConfig = table.clone(cfg);
	winform.editOutbound.text = web.json.stringify(winform.outboundConfig,true,false);
	onEditChange();
}
winform.setOutboundConfig({
	port = 443;
	protocol = "vmess";
	network = "tcp";
});
winform.btnAddOutbound.skin(style.primaryButton);
winform.btnSaveOutbound.skin(style.button);
winform.btnSaveOutbound.disabled = true;

winform.btnUpdateCore.skin(style.plainButton)
winform.btnUpdateCore.oncommand = function(id,event){ 
	winform.btnUpdateCore.disabledText = {'\uF254';'\uF251';'\uF252';'\uF253';'\uF250'};
	var sel = winform.cmbProtocol.selText;
	
	if(sel=="ssr"){
		import v2ray.core.ssr;
		var versionTag = v2ray.core.ssr.updateCore();
		if( versionTag ){
			publish("uiCommand.restartV2RayCore");
			winform.btnUpdateCore.disabledText = null;
			winform.msgOk("SSR Core (ShadowsocksR-native) has been updated to:" + versionTag,1500)
		}
		else {
			winform.btnUpdateCore.disabledText = null;
		} 	
	}
	elseif(sel=="vless"){
		import v2ray.core.xray;
		var versionTag = v2ray.core.xray.updateCore();
		if( versionTag ){
			publish("uiCommand.restartV2RayCore");
			winform.btnUpdateCore.disabledText = null;
			winform.msgOk("Downloaded the latest XRay Core Version：" + versionTag+ '\nV2Ray 内核已切换为：XRay Core',1500)
		}
		else {
			winform.btnUpdateCore.disabledText = null;
			winform.msgErr("XRay Core download failed!");
		} 	
	}
	elseif(sel=="naive"){
		import v2ray.core.naive;
		var versionTag = v2ray.core.naive.updateCore();
		if( versionTag ){
			publish("uiCommand.restartV2RayCore");
			winform.btnUpdateCore.disabledText = null;
			winform.msgOk("NaÏveProxy Core Updated to：" + versionTag,1500)
		}
		else {
			winform.btnUpdateCore.disabledText = null;
			winform.msgErr("NaÏveProxy Core download failed!");
		} 		
	}	
	else {
		import v2ray.core;
		var versionTag = v2ray.core.updateCore();
		if( versionTag ){
			publish("uiCommand.restartV2RayCore");
			winform.btnUpdateCore.disabledText = null;
			winform.msgOk("Downloaded the latest V2Ray Core version：" + versionTag + '\nV2Ray 内核已切换为： V2Ray Core',1500)
		}
		else {
			winform.btnUpdateCore.disabledText = null;
			winform.msgErr("V2Ray Core download failed!");
		} 
	}
}

winform.qrPicture.skin(
	foreground = { 
		hover = 0x10FFFF00; 
		active = 0x20EEEE00; 
	}
)
winform.qrPicture.oncommand = function(id,event){
    var lnk = string.trim(winform.editSharedLink.text);
    if(#lnk){
    	var frmChild = winform.loadForm("\forms\main\tools\qr.aardio");
		frmChild.createQrCode(lnk);
		frmChild.show();	
    }	
}

winform.editId.skin(
	background = { 
		hover = "/res/images/btn-hover.png";
		focus = "/res/images/btn-focus.jpg";
		active = "/res/images/btn-active.png";
		disabled = "/res/images/btn-disabled.png"; 
	}
)
winform.editId.oncommand = function(id,event){
	
}

winform.editOutbound.oncommand = function(id,event){
	
}

winform.show();
win.loopMessage();
return winform;