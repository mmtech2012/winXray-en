import win.ui;
import fonts.fontAwesome;
/*DSG{{*/
var frmXray = win.form(text="winXray ";right=959;bottom=591;bgcolor=16777215)
frmXray.add(
btnEditPacOrUwp={cls="plus";text="Edit PAC";left=349;top=366;right=436;bottom=396;align="left";db=1;dr=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesome');padding={left=12}};iconText='\uF1C4';notify=1;textPadding={left=30};z=7};
btnImportServerFromClipBd={cls="plus";text="Import links in bulk";left=445;top=366;right=596;bottom=396;align="left";db=1;dr=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesome');padding={left=12}};iconText='\uF196 ';notify=1;textPadding={left=30};z=8};
btnTcping={cls="plus";text="Detect and connect to the fastest";left=694;top=366;right=941;bottom=398;align="left";bgcolor=11580047;border={radius=4};db=1;dr=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesome');padding={left=18}};iconText='\uF012';notify=1;textPadding={left=42};z=3};
chkAutoTest={cls="plus";text="Auto Test";left=594;top=368;right=684;bottom=398;align="left";db=1;dr=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesome');padding={left=12}};iconText='\uF0C8';notify=1;textPadding={left=30};z=9};
edit={cls="edit";left=6;top=405;right=953;bottom=585;bgcolor=0;color=16777215;db=1;dl=1;dr=1;edge=1;hscroll=1;multiline=1;vscroll=1;z=2};
listview={cls="listview";left=4;top=5;right=954;bottom=358;db=1;dl=1;dr=1;dt=1;edge=1;fullRow=1;gridLines=1;z=1};
radioProxy={cls="radiobutton";text="Global Proxy";left=144;top=372;right=241;bottom=398;bgcolor=16777215;db=1;dl=1;font=LOGFONT(h=-13);z=4};
radioProxyDirect={cls="radiobutton";text="No Proxy";left=51;top=370;right=128;bottom=396;bgcolor=16777215;db=1;dl=1;font=LOGFONT(h=-13);z=6};
radioProxyPac={cls="radiobutton";text="PAC Proxy";left=251;top=372;right=338;bottom=398;bgcolor=16777215;db=1;dl=1;font=LOGFONT(h=-13);z=5}
)
/*}}*/

frmXray.listview.insertColumn("Types",100) 
frmXray.listview.insertColumn("server",160) 
frmXray.listview.insertColumn("port",70) 
frmXray.listview.insertColumn("encryption",90) 
frmXray.listview.insertColumn("protocol",50) 
frmXray.listview.insertColumn("Remarks",190) 
frmXray.listview.insertColumn("response speed",95) 
frmXray.listview.insertColumn("status",-1) 
frmXray.listview.setExtended(0x10000/*_LVS_EX_DOUBLEBUFFER*/);

frmXray.show();

import config;
import v2ray.core; 
var currentOutboundIndex,currentOutboundAddress;
var activeOutbound = function(outboundIndex,outboundAddress,enableRetry,timerTesting){
	
	if(!outboundIndex && !outboundAddress){
		outboundIndex,outboundAddress = currentOutboundIndex,currentOutboundAddress;
		if(!outboundIndex && !outboundAddress) {
			return;
		}
	}
	
	var outbound = config.proxy.outbounds[outboundIndex];
	if(!outbound){
		return ; 
	} 
	
 	
	var startTesting = timerTesting;
	if(!startTesting){
		..publish("activeOutbound",false); 
		
		var started,err = v2ray.core.restart(frmXray.edit,outbound);
		startTesting = started;
		if(!started){
			frmXray.edit.print("Error starting V2Ray",err:""); 
			frmXray.btnTcping.disabledText = null;
			return false;
		}
	}

	if( startTesting  ){
		currentOutboundIndex,currentOutboundAddress = outboundIndex,outboundAddress;
		frmXray.autoTesting = true;
		
		..thread.invoke( 
			function(frmXray,outboundIndex,outboundAddress,sockProxyPort,httpProxyAddress,enableRetry,timerTesting){
				import web.rest.client;
				var restClient = web.rest.client(,httpProxyAddress);
				restClient._http.setTimeouts(1000,2000,2000);
				var ret = restClient.get("https://www.google.com/generate_204");
				var lastStatusCode = restClient.lastStatusCode;
				
				if( lastStatusCode == 204 ){
					frmXray.onStartXrayComplete(outboundIndex,timerTesting,outboundAddress); 
					return;	
				}
				restClient.close();
				
				if(timerTesting){
					sleep(100);
				}
				
				import inet.http;
				var http = inet.http(,httpProxyAddress);
				http.setTimeouts(1000,1000,1000);
				var isAlive = http.get("http://www.msftconnecttest.com/connecttest.txt")=="Microsoft Connect Test";
				http.close();	 

				if(isAlive){
					frmXray.onStartXrayComplete(outboundIndex,timerTesting,outboundAddress);
					return;	
				}
				
				if(timerTesting){
					sleep(100);
				}
				
				import wsock.tcp.socks5Client;
				
				var client;
				for(i=1;2;1){
					sleep(200);
					client = wsock.tcp.socks5Client("127.0.0.1",sockProxyPort); 
					if(client)break;
				}
				
				if(client){
					client.setTimeouts(1000,1000); 
					if(client.connect("www.google.com",80) ){
						
						var sendData =/***********
GET /  HTTP/1.1
Host: www.google.com
Connection: close
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64)
Accept: */*;  
Accept-Language: zh-CN,zh; 
Accept-Charset:utf-8;  
***********/
						client.write( sendData + '\r\n\r\n' )
						var rep = client.read(9);
						client.close();
							
						if( rep && ..string.startWith(rep,"HTTP/1.1 ") ){
							frmXray.onStartXrayComplete(outboundIndex,timerTesting,outboundAddress);
							return;	
						} 
					}
				};
				frmXray.onStartXrayFailed(outboundIndex,enableRetry,outboundAddress);
			},frmXray,outboundIndex,outboundAddress, 
			v2ray.core.socksProxyPort,v2ray.core.getSystemProxyConfig(),enableRetry,timerTesting
		)

		return true;
	}	
}

var autoUpdateSubscriptionTimerId; 
frmXray.autoUpdateSubscription = function(timeout){
		..win.clearTimeout(autoUpdateSubscriptionTimerId); 
		if(timeout===-1){
			autoUpdateSubscriptionTimerId = null;
			return;
		}
		
		if(config.proxy.autoRefreshSubscription){
			autoUpdateSubscriptionTimerId = ..win.setTimeout(function(){
				autoUpdateSubscriptionTimerId = null;
				
				import v2ray.outbounds;
				v2ray.outbounds.autoUpdateSubscription(); 
			},timeout:10000)  		
		}
} 

frmXray.onStartXrayComplete = function(outboundIndex,timerTesting,outboundAddress){
	frmXray.autoUpdateSubscription(-1);
	
	var outbound = config.proxy.outbounds[outboundIndex];
	var outbound = ..config.proxy.outbounds[outboundIndex];
	if(!(outbound && (outbound.address == outboundAddress))){
		return;
	}
	
	var listview = frmXray.listview;
	listview.ensureVisible(outboundIndex);
	for b,v in table.eachIndex(config.proxy.outbounds){
		listview.setItemText("",b,8);
	}
	
	frmXray.autoTesting = false;
	listview.setItemText("Active server: normal",outboundIndex,8);
	listview.activeOutboundIndex = outboundIndex;

	var address  = listview.getItemText(outboundIndex,2);
	if(!timerTesting) frmXray.edit.print("Switched to server：",address);
	listview.activeOutboundAddress = address;

	if(listview.getItemText(outboundIndex,7)=="unavailable"){
		listview.setItemText("",outboundIndex,7);
	}
		
	frmXray.onTcpingReturn = function(outboundIndex,address,succeeded,speedText){
		if(address==listview.getItemText(outboundIndex,2)){
			listview.setItemText(speedText,outboundIndex,7);
		}
	};
	frmXray.validOutbounds = {};
	
	frmXray.btnTcping.disabledText = null;
	..publish("activeOutbound",address); 
}

subscribe("activeOutbound",function(address){
	..globalActiveOutbound = address;
} )

frmXray.onStartXrayFailed = function(outboundIndex,enableRetry,outboundAddress){ 
	..publish("activeOutbound",false); 

	var outbound = ..config.proxy.outbounds[outboundIndex];
	if(!(outbound && (outbound.address == outboundAddress))){
		return;
	}
	
	if(outbound.subscribeUrl){
		frmXray.autoUpdateSubscription();
	} 
	
	var listview = frmXray.listview;
	listview.ensureVisible(outboundIndex);
	if(listview.activeOutboundIndex==outboundIndex){
		listview.activeOutboundIndex=null;
		listview.activeOutboundAddress = null;
	}
	
	listview.setItemText("unavailable",outboundIndex,7);
	if(enableRetry){
		if(#frmXray.validOutbounds){
			var next = table.shift(frmXray.validOutbounds);
			activeOutbound(next[1],next[2],#frmXray.validOutbounds);
			listview.setItemText("Exception, test next...",outboundIndex,8);
			frmXray.edit.print("Server exception:",listview.getItemText(outboundIndex,2)); 
			frmXray.edit.print("Trying to connect：",next[2]); 	
		}
		else {
			frmXray.btnTcping.oncommand();
		}
	}
	else {
		listview.setItemText("Active server: exception",outboundIndex,8);
		frmXray.edit.print("Switched to server：",listview.getItemText(outboundIndex,2)); 
		frmXray.autoTesting = false;
	} 
	
	frmXray.btnTcping.disabledText = null;
	
}

var tcping = function(frmXray,outboundIndex,outbound){ 
	import wsock.tcp.client; 
	var timeout = 0; 
	var failed = 0;
	for(i=1;8;1){ 
		sleep(1);
		
		var client = wsock.tcp.client(); 	
		var tickBegin = time.tick(); 
		if(client.connectTimeout(outbound.address,tonumber(outbound.port),3)){
			var ret = client.send("."); 
			client.close();
			
			if( ret != 1){  
				frmXray.onTcpingReturn(outboundIndex,outbound.address,false,"unavailable");
				return;
			}
			timeout =  timeout + (time.tick() - tickBegin);
		}
		else {
			client.close();
			
			failed++;
			if(failed>1){ 
				frmXray.onTcpingReturn(outboundIndex,outbound.address,false,"unavailable");
				return;	
			} 
		} 
	}
	
	frmXray.onTcpingReturn(outboundIndex,outbound.address,true,math.round(timeout / (8-failed) / 1000,2)+"Sec"); 
};

var retryOnNetworkAliveTimerId;
frmXray.onTcpingFailed = function(){
	frmXray.autoTesting = false;
	frmXray.btnTcping.disabledText = null;	
	..publish("activeOutbound",false); 
	
	if(retryOnNetworkAliveTimerId){
		frmXray.clearTimeout(retryOnNetworkAliveTimerId);
	}
		
	if(inet.http.isAlive(,false)){
		frmXray.autoUpdateSubscription(1000);
	}
	else {
		retryOnNetworkAliveTimerId = frmXray.setInterval( 
			1000,function(){ 

				if(frmXray.listview.activeOutboundIndex){
					retryOnNetworkAliveTimerId = null;
					return 0;
				}
				
				if(inet.http.isAlive(,false)){
					frmXray.btnTcping.oncommand();
					retryOnNetworkAliveTimerId = null;
					return false;
				}	
			} 
		) 
	}  
} 

import sysProxy; 
import style;
frmXray.btnTcping.skin(style.primaryButton);
frmXray.btnTcping.oncommand = function(id,event){
	frmXray.listview.activeOutboundIndex = null;
	frmXray.listview.activeOutboundAddress = null;
	frmXray.listview.clearColumnImage();
	
	var items = frmXray.listview.items;
	if(#items){
		frmXray.btnTcping.disabledText = {'\uF254';'\uF251';'\uF252';'\uF253';'\uF250'}
		
		v2ray.core.lastDownloadingCoreFailed = false;
		if(!v2ray.core.getPath()){ 
			frmXray.btnTcping.disabledText = null; 
			return;
		} 

		var failedCount = 0;
		frmXray.onTcpingReturn = function(outboundIndex,address,succeeded,speedText){
			if(address!=frmXray.listview.getItemText(outboundIndex,2)){
				return; 
			} 
			frmXray.listview.setItemText(speedText,outboundIndex,7);
			
			if(succeeded){
				frmXray.listview.setItemText(speedText,outboundIndex,7);
				frmXray.validOutbounds = {}
				frmXray.onTcpingReturn = function(outboundIndex,address,succeeded,speedText){
					if(address!=frmXray.listview.getItemText(outboundIndex,2)){
						return; 
					} 
					
					frmXray.listview.setItemText(speedText,outboundIndex,7);
					if(succeeded) { 
						table.push(frmXray.validOutbounds,{outboundIndex;address});
					}
					else{
						failedCount++;
						if(failedCount==#items) {
							frmXray.onTcpingFailed();
						}
					}
				}
				activeOutbound(outboundIndex,address,#items>1);	
			}
			else{
				failedCount++;
				if(failedCount==#items) {
					frmXray.onTcpingFailed(); 
				}
			}
		}
			
		thread.createSuspended(true);
		
		var handles = {};
		var outbounds = config.proxy.outbounds;
		var lenPing = 0;
		var listview = frmXray.listview;
		for(i=1;#items;1){
			if(outbounds[i].autoConnect===false){
				listview.setItemText("Speed test prohibited",i,7);
				continue;
			}
			
			if(lenPing>config.proxy.maxTestServers){
				frmXray.edit.print("The number of speed test servers exceeds the set upper limit:"+config.proxy.maxTestServers + ", You can modify this value in [Configuration / Advanced Settings].")
				break;
			}
			lenPing++;
	
			listview.setItemText("...",i,7);
			listview.setItemText("",i,8);
			
			var h = thread.create(tcping,frmXray,i,config.proxy.outbounds[i]);	 
			table.push(handles,h);
		} 
		thread.createSuspended(false);
		
		for(i=1;#handles;1){
			var h = handles[i];	 
			thread.resume(h);
			raw.closehandle(h);
		} 
		
		if(#handles) ..thread.waitOne(handles); 
	}
	else {
		if(id) frmXray.msgWarn("Please add server first")
		v2ray.core.stop();
		
		frmXray.btnTcping.disabledText = null;
		frmXray.autoTesting = false;
		frmXray.onTcpingReturn = function(outboundIndex,address,succeeded,speedText){};
	}
}

import v2ray.core;
import v2ray.pacServer;
frmXray.onDestroy = function(){
	v2ray.core.stop();
	v2ray.pacServer.stop();
}

var pingThread = function( ip,frmXray ) {
	import icmp.ping; 
	var ping = icmp.ping(); 
	
	for(i=1;4;1){
		if( ping.perform(ip) ){
				frmXray.edit.print(ip,string.format( "Reply from %s: bytes=%d time=%dms TTL=%d"
				, ping.ip , #ping.requestData  , ping.echoReply.roundTripTime , ping.echoReply.options.ttl ) ); 
		}  
		else {
			frmXray.edit.print(ip,"Request timed out");
		}
		
	}
} 

var removeOutbounds = function(selectedItems){
	
	//避免后台线程改变activeIndex
	frmXray.onTcpingReturn = function(outboundIndex,address,succeeded,speedText){}; 
	frmXray.btnTcping.disabledText = null;
	frmXray.autoTesting = false;
	
	var activeIndex = frmXray.listview.activeOutboundIndex;  
	var outbounds = config.proxy.outbounds;
	for(i=#outbounds;1;-1){ 
		var ob = outbounds[i];
		if(activeIndex==i){
			ob.active = true;
		}
	}

	if(#selectedItems){
		for(i=#selectedItems;1;-1){
			var item = selectedItems[i] 
			frmXray.listview.delItem(item);
			..table.remove(config.proxy.outbounds,item);
		}
	}
	else{
		for(i=#outbounds;1;-1){ 	
			if(frmXray.listview.getItemText(i,7)=="unavailable"){
				..table.remove(outbounds,i);
				frmXray.listview.delItem(i);
			} 
		}
	}

	frmXray.listview.activeOutboundIndex = null;
	for(i=1;#outbounds;1){
		if(outbounds[i].active){
			frmXray.listview.activeOutboundIndex = i;
			break;
		}
	}
	publish("outbounds.updateConfigJson"); 

	if(activeIndex && (!frmXray.listview.activeOutboundIndex) ){
		if(!v2ray.core.lastDownloadingCoreFailed) frmXray.btnTcping.oncommand();
	}
}

import v2ray.outbounds;
frmXray.listview.onnotify = function(id,code,ptr){
	select(code) {
		case 0xFFFFFFF4/*_NM_CUSTOMDRAW*/ {
			var lvcd = frmXray.listview.getNotifyCustomDraw(code,ptr);
			if( lvcd.nmcd.dwDrawStage == 0x10001/*_CDDS_ITEMPREPAINT*/)
				return 0x20/*_CDRF_NOTIFYSUBITEMDRAW*/
			elseif( lvcd.nmcd.dwDrawStage == 1/*_CDDS_PREPAINT*/ ){
				return 0x20/*_CDRF_NOTIFYITEMDRAW*/;
			}
			elseif( lvcd.nmcd.dwDrawStage == ( 0x10001/*_CDDS_ITEMPREPAINT*/ | 0x20000/*_CDDS_SUBITEM*/) ){ 
				//注意这里 iSubItem 的索引自0开始( 其他函数通常自1开始 )
				lvcd.clrText = lvcd.nmcd.dwItemSpec % 2 ? 0x373737 : 0;
				lvcd.clrTextBk = lvcd.nmcd.dwItemSpec % 2 ? 0xFFFFFF : 0xF5F5F5;
				
				var item = lvcd.nmcd.dwItemSpec+1;
				if(lvcd.iSubItem==7){ 
					if(frmXray.listview.activeOutboundIndex=item){ 
						lvcd.clrTextBk = 0x8AFFC3
					} 
				}
				elseif(lvcd.iSubItem==6){ 
					if(..config.proxy.outbounds[item].autoConnect===false){ 
						lvcd.clrText = 0xCCCCCC;
					} 
				}
				lvcd.update()
				
				return 0/*_CDRF_DODEFAULT*/
			}
		}
		case  0xFFFFFFFD/*_NM_DBLCLK*/ {
			var nm = frmXray.listview.getNotifyMessage(code,ptr);
			if( nm ){
				v2ray.core.lastDownloadingCoreFailed = false;
				
				frmXray.onTcpingReturn = function(outboundIndex,address,succeeded,speedText){
					if(address==frmXray.listview.getItemText(outboundIndex,2)){
						frmXray.listview.setItemText(speedText,outboundIndex,7);
					} 
				}
				frmXray.btnTcping.disabledText = null;
				
				for b,v in table.eachIndex(config.proxy.outbounds){
					frmXray.listview.setItemText("",b,8);
				}
				activeOutbound(nm.iItem,frmXray.listview.getItemText(nm.iItem,2),false); 
			}
		}
		case 0xFFFFFFFB/*_NM_RCLICK*/  {
			var x,y = win.getCursorPos();
			var nm = frmXray.listview.getNotifyMessage(code,ptr);
			if(!nm) return;

			var currentIdx = nm.iItem;
			if(!currentIdx){
				var popmenu = win.ui.popmenu(frmXray);
				popmenu.add("New proxy server",function(id){ 
					var frmOutbound = frmXray.loadForm("\forms\main\outbound.aardio"); 
					frmOutbound.doModal() 
				});
				
				popmenu.add("Bulk import Servers & Subscribes from clipboard",function(id){
					frmXray.btnImportServerFromClipBd.oncommand();
				});
				
				popmenu.add('Update all Subscribes',function(id){
					v2ray.outbounds.updateSubscription();
				});
				
				popmenu.add(); 
				
				popmenu.add('Clear server list',function(id){
					config.proxy.outbounds = ..table.array();
					frmXray.listview.clear();
					
					frmXray.btnTcping.disabledText = null;
					frmXray.autoTesting = false;
					frmXray.onTcpingReturn = function(outboundIndex,address,succeeded,speedText){}  
					publish("outbounds.updateConfigJson");
				});
				
				popmenu.add('Clear "unavailable" servers',function(id){
					removeOutbounds();
				});	
				
				popmenu.add("Reset to default server list",
					function(id){
						..config.__loadDefaultOutbounds();
						publish("outbounds.updateConfigJson");
						publish("uiCommand.restartV2RayCore");
					}
				);
				popmenu.add();
				
				if(!frmXray.btnTcping.disabledText){
					popmenu.add('Sort servers by "response speed"',function(id){
						frmXray.listview.sortBySpeed();
					});	 
					popmenu.add();
				}; 
				popmenu.popup(x,y,true);
				return;
			}
			
			var selectedItems = frmXray.listview.selected; 
			var popmenu = win.ui.popmenu(frmXray);
			
			if(#selectedItems==1){
				popmenu.add('Set as active server (double click)',function(id){
					if(currentIdx){
						v2ray.core.lastDownloadingCoreFailed = false;
						
						frmXray.onTcpingReturn = function(outboundIndex,address,succeeded,speedText){
							if(address==frmXray.listview.getItemText(outboundIndex,2)){
								frmXray.listview.setItemText(speedText,outboundIndex,7);
							} 
						}
						
						frmXray.btnTcping.disabledText = null;
						
						for b,v in table.eachIndex(config.proxy.outbounds){
							frmXray.listview.setItemText("",b,8);
						}
						activeOutbound(currentIdx,frmXray.listview.getItemText(currentIdx,2),false)
					}
				});

				popmenu.add();
			}
			 
			popmenu.add("Edit / add proxy server",function(id){ 
				var frmOutbound = frmXray.loadForm("\forms\main\outbound.aardio");
				frmOutbound.setOutboundConfig(config.proxy.outbounds[currentIdx]);
				frmOutbound.doModal() 
			});
			
			popmenu.add("Bulk import Servers & Subscribes from clipboard",function(id){
				frmXray.btnImportServerFromClipBd.oncommand();
			});
			 
			var subscribeUrl = config.proxy.outbounds[currentIdx][["subscribeUrl"]];
			if(#selectedItems=1 && subscribeUrl){
				
				var ps;
				var cfgSubscribeUrls = ..config.proxy.subscribeUrls;
				for(i=#cfgSubscribeUrls;1;-1){
					var sub = cfgSubscribeUrls[i]  
					if(sub.url===subscribeUrl) {
						ps = sub.ps;
						break;
					}
				}
				
				if(#ps){
					ps = ": "+ps;
				}
			
				popmenu.add('Update current Subscribe'+ps,function(id){
					if(currentIdx){
						v2ray.outbounds.updateSubscription({[subscribeUrl]=true});
					}
				});	
			}

			popmenu.add('Update all Subscribes',function(id){
				if(currentIdx){
					v2ray.outbounds.updateSubscription();
				}
			});	
			 
			popmenu.add()

			var autoConnect = config.proxy.outbounds[currentIdx].autoConnect!==false; 
			var id = popmenu.add('Allow automatic speed test',function(id){
				if(currentIdx){
					for(i=#selectedItems;1;-1){ 
						var item = selectedItems[i];
						if(autoConnect === false){
							config.proxy.outbounds[item].autoConnect = null;
							frmXray.listview.setItemText("",item,7);
						}
						else {
							config.proxy.outbounds[item].autoConnect = false;
							frmXray.listview.setItemText("禁止测速",item,7);
						}
					}
				}
			});
			popmenu.check(id,autoConnect,0/*_MF_BYCOMMAND*/); 
			popmenu.add()
			
			popmenu.add('Delete server',function(id){
				removeOutbounds(selectedItems);
			});
				
			popmenu.add('Clear server list',function(id){
				if(currentIdx){
					config.proxy.outbounds = ..table.array();
					frmXray.listview.clear();
					publish("outbounds.updateConfigJson");
				}
			});
			
			popmenu.add('Clear "unavailable" servers',function(id){
				removeOutbounds();
			});	
			
			popmenu.add("Reset to default server list",
				function(id){
					..config.__loadDefaultOutbounds();
					publish("outbounds.updateConfigJson");
					publish("uiCommand.restartV2RayCore");
				}
			);  
			 
			if(#selectedItems==1){	
		 
				popmenu.add();
				popmenu.add('Generate QR code',function(id){
					if(currentIdx){
						import v2ray.outbounds;
						import win.clip;
						
						var str = v2ray.outbounds.exportSharedLinks({config.proxy.outbounds[currentIdx]});
						if(str){ 
							var frmChild = frmXray.loadForm("\forms\main\tools\qr.aardio");
							frmChild.createQrCode(str);
							frmChild.show();
						}  
					}
				});
				
				popmenu.add('Copy server share link',function(id){
					if(currentIdx){
						import v2ray.outbounds;
						import win.clip;
						
						var str = v2ray.outbounds.exportSharedLinks({config.proxy.outbounds[currentIdx]});
						if(str){ 
							win.clip.write(str); 
							frmXray.edit.print("Copy link:",str);
						}  
					}
				});

				popmenu.add();
				
				var toolMenu = win.ui.popmenu(frmXray)
				toolMenu.add('Native Ping test',function(id){
					if(currentIdx){
						thread.invoke(pingThread,config.proxy.outbounds[currentIdx].address,frmXray)
					}
				});
					
				toolMenu.add('Ping test worldwide ...',function(id){
					if(currentIdx){
						process.openUrl("http://ping.pe/" + config.proxy.outbounds[currentIdx].address)
					}
				});
				
				toolMenu.add('Global port test ...',function(id){
					if(currentIdx){
						process.openUrl("http://port.ping.pe/" + config.proxy.outbounds[currentIdx].address + ":" + config.proxy.outbounds[currentIdx].port)
					}
				});
				
				toolMenu.add('Online trace route test...',function(id){
					if(currentIdx){
						process.openUrl("https://www.boce.com/traceroute/" + config.proxy.outbounds[currentIdx].address)
					}
				});
				
				toolMenu.add('Native route detection',function(id){
					if(currentIdx){
						import process;
						process.execute("cmd.exe","/k tracert " + config.proxy.outbounds[currentIdx].address);
					}
				});

				if(config.proxy.outbounds[currentIdx].port == 443 && config.proxy.outbounds[currentIdx].tls){
					toolMenu.add('Browse the HTTPS homepage ...',function(id){
						if(currentIdx){
							process.openUrl("https" ++ "://" + config.proxy.outbounds[currentIdx].address); 
						}
					});	 
				}
				
				popmenu.add("Server tools",toolMenu)
				
				popmenu.add('SSH login server',function(id){
					if(currentIdx){
						if(_STUDIO_INVOKED){
							frmXray.msgErr("Please run this function after release");
							return;
						}
						import process;
						process.execute(io._exepath,"/sshLogin root@" 
							+ config.proxy.outbounds[currentIdx].address + ":" 
							+ (config.proxy.outbounds[currentIdx].sshPort||22));
					}
				});  
			}
			popmenu.popup(x,y,true);
		}
		case 0xFFFFFF94/*_LVN_COLUMNCLICK*/{
			var nm = frmXray.listview.getNotifyMessage(code,ptr)
			if(nm.iSubItem==7){
				frmXray.listview.sortBySpeed();
			} 
			else {
				frmXray.msgWarn("Please click the [Response Speed] column for sorting")
			}
		}
	}
}

// 排序函数
frmXray.listview.sortBySpeed = function () {
	if(frmXray.btnTcping.disabledText){
		frmXray.msgWarn("Please wait for the speed test to complete, and then click this sorting column.");
		return;
	}
	
	var outbounds = ..table.clone(config.proxy.outbounds);
	var activeIndex = frmXray.listview.activeOutboundIndex;
	frmXray.onTcpingReturn = function(outboundIndex,address,succeeded,speedText){}; //避免后台线程改变activeIndex
	
	for(i=#outbounds;1;-1){
		var ob = outbounds[i];
		if(type(ob)!="table"){
			table.remove(outbounds,i);
			continue;
		}
		
		ob.speed = frmXray.listview.getItemText(i,7);
		if(ob.speed=="unavailable"){
			ob.speedNum = 0xFFFE;
		}
		elseif(ob.speed==""){
			ob.speedNum = 0xFFFF;
		}
		elseif(ob.speed=="..."){
			frmXray.msgWarn("Please wait for the detection speed to complete, and then click this sorting column.")
			return;
		}
		else {
			ob.speedNum = tonumber(ob.speed):-3;
		} 
		
		if(activeIndex==i){
			ob.active = true;
		}
	}
	
	var hasStatus;
	for(i=1;#outbounds;1){
		if(#outbounds[i].speed){
			hasStatus = true;
			break;
		}
	}
	
	if(!hasStatus){
		frmXray.msgWarn("Please click [Detect and connect to the fastest] to get the server response speed!");
		return;
	}
	
	var desc = frmXray.listview.getColumnImage(7) == 0;
	if(desc){
		table.sort(outbounds,function(b){ 
			return owner.speedNum > b.speedNum;
		})	
	}
		else {
			table.sort(outbounds,function(b){ 
			return owner.speedNum < b.speedNum;
		})
		} 
	
	frmXray.listview.activeOutboundIndex = null;
	for(i=1;#outbounds;1){
		if(outbounds[i].active){
			frmXray.listview.activeOutboundIndex = i;
			break;
		}
	}
	
	outbounds.fields = {"protocol";"address";"port";"security";"network";"ps";"speed"}
	config.proxy.outbounds = outbounds;
	frmXray.listview.setTable(outbounds);	
	outbounds.fields = {"protocol";"address";"port";"security";"network";"ps"}
	
	//清理用于排序的临时字段
	for(i=1;#outbounds;1){
		var ob = outbounds[i];
		ob.speedNum = null;
		ob.speed = null;
		ob.active = null;
	} 
	
	if(frmXray.listview.activeOutboundIndex){
		frmXray.listview.setItemText("Active server: normal",frmXray.listview.activeOutboundIndex,8)
	} 
	frmXray.listview.setColumnImage(7, desc ? 1 : 0);
}

import win.imageList;
var iml = win.imageList(16, 15);
iml.add('GIF\56\57a \0\15\0\x80\0\0\x80\x80\x80\xff\0\xff\33\xf9\4\0\0\0\0\0\44\0\0\0\0 \0\15\0\0\2\31\x8c\x8f\xa9\xcb\xed\15\xa3\x9c\xb4N\xf0\x80\xde\56k\xbfA\\\xd7\x84 \x97Y\xea\xca\xb6\xee\11\xc7F\1\0;', 0xff00ff);
frmXray.listview.setColumnImageList(iml);

subscribe("uiCommand.restartV2RayCore",function(){ 
	config.proxy.outbounds.fields = {"protocol";"address";"port";"security";"network";"ps";}
	
	var outbounds = config.proxy.outbounds;
	for(i=#outbounds;1;-1){
		if(type(outbounds[i])!="table"){
			table.remove(outbounds,i);
		}
	}
	frmXray.listview.setTable(outbounds);	 
	
	if(!v2ray.core.lastDownloadingCoreFailed) frmXray.btnTcping.oncommand();
} )

import process;
if(#config.proxy.outbounds){
	config.proxy.outbounds.fields = {"protocol";"address";"port";"security";"network";"ps";}
	
	var outbounds = config.proxy.outbounds;
	for(i=#outbounds;1;-1){
		if(type(outbounds[i])!="table"){
			table.remove(outbounds,i);
		}
	}
	frmXray.listview.setTable(outbounds);	
	
	frmXray.setTimeout( 
		function(){
			publish("uiCommand.restartV2RayCore");	
		},1000
	);	
}

subscribe("sysProxy.modeChanged",function(mode){
	frmXray.radioProxyPac.checked = false;
	frmXray.radioProxy.checked = false;
	frmXray.radioProxyDirect.checked = false;
	
	if(mode = "pac"){
		frmXray.radioProxyPac.checked = true;
		if(_WIN10_LATER) frmXray.btnEditPacOrUwp.text = "Edit PAC";
	}
	elseif(mode = "proxy"){
		frmXray.radioProxy.checked = true;
		if(_WIN10_LATER) frmXray.btnEditPacOrUwp.text = "Configure UWP";
	}
	else{
		frmXray.radioProxyDirect.checked = true;
	}
} )
publish("sysProxy.modeChanged",config.proxy.mode);

import sysProxy;
var switchProxyMode = function(){
	if(frmXray.radioProxyPac.checked){
		sysProxy.switchToPacMode();	
	}
	elseif(frmXray.radioProxy.checked){
		sysProxy.switchToGlobalMode();	
	}
	else {
		sysProxy.switchToDirectMode();	
	}  
}
frmXray.radioProxyPac.oncommand = switchProxyMode;
frmXray.radioProxy.oncommand = switchProxyMode;
frmXray.radioProxyDirect.oncommand = switchProxyMode;

import win.dlg.message; 
frmXray.btnEditPacOrUwp.skin(style.plainButton)
frmXray.btnEditPacOrUwp.oncommand = function(id,event){
    if(frmXray.radioProxy.checked && _WIN10_LATER ){
        if(_STUDIO_INVOKED){
        	frmXray.msgErr("Please publish as EXE first！");
        	return;
        }
        
        import process;
    	process.execute(io._exepath,"/uwp","runas")
    	return;
    }
    
	if(frmPac && win.isWindow(frmPac.hwnd)){
		if( win.isIconic(frmPac.hwnd) ) win.show(frmPac.hwnd,9/*_SW_RESTORE*/ );
		if( !win.isVisible(frmPac.hwnd) ) win.show(frmPac.hwnd,0x1/*_SW_NORMAL*/ );
		win.setForeground(frmPac.hwnd)
		return;
	}

	frmPac = ..mainForm.loadForm("\forms\main\pac.aardio");
	frmPac.show();
}
subscribe("uiCommand.showPacForm",function(...){
	frmXray.btnEditPacOrUwp.oncommand();
} )

subscribe("uiCommand.print",function(...){
	frmXray.edit.print(...);
} )

import v2ray.outbounds;
frmXray.btnImportServerFromClipBd.skin(style.plainButton)
frmXray.btnImportServerFromClipBd.oncommand = function(id,event){
	var str = ..win.clip.read();
	if(str){  
		str = ..string.trim(str,'"\'\t\r\n '); 
		if( ..string.startWith(str,"http://") 
			|| ..string.startWith(str,"https://") 
			|| ..string.match(str,"^\s*/\N+\s*$") ){
			if(..string.match(str,"^\s*/\N+\s*$")){
				str = "https://github.com" + str;
			}
			
			v2ray.outbounds.updateSubscription({[str]=true});
			return;
		}

		var outbounds = v2ray.outbounds.importFromString(str);
		if(#outbounds){
			..table.append(config.proxy.outbounds,outbounds); 
			publish("uiCommand.restartV2RayCore");
			publish("outbounds.updateConfigJson");
			frmXray.msgOk("Successfully imported" + #outbounds + "Servers",1200); 
			return; 
		}
	}

	frmXray.msgFrown('Server not imported! \r\nPlease copy the following formatted text (automatically clear invalid content):\r\n\r\n1, one or more lines (ignore invalid lines) to share links or server JSON configuration \r\nSupport vmess://, vless://, ss://, ssr://, trojan://, trojan-go:// and other common sharing links. \r\n\r\n2. A JSON array containing multiple server configurations, supporting winXray format and general format JSON. \r\n\r\n3, a single http:// or https:// general feed address. \r\nYou can directly use the github file address (including blob or raw directory name) in the browser address bar. \r\nYou can also just copy the github file path starting with a single slash. \r\n\r\nThe feed can be encoded in BASE64 or returned in plain text to the configuration or sharing link specified in the above 1 and 2.')
}

var testTimerId;
frmXray.chkAutoTest.oncommand = function(id,event){
	if(testTimerId){
		frmXray.clearInterval(testTimerId);
	}

	config.proxy.test = frmXray.chkAutoTest.checked;
	if(!config.proxy.test) return;

	import inet.http;
	testTimerId = frmXray.setInterval( 
		config.proxy.testInterval*1000,function(){
			if(frmXray.btnTcping.disabled) return;
			if( frmXray.autoTesting ) return; 

			var idx = frmXray.listview.activeOutboundIndex;
			var address = frmXray.listview.activeOutboundAddress;
			if( !( idx&&address) ){ 
				if(!inet.http.isAlive(,false)){
					return config.proxy.testInterval*1000;
				}
				
				if(!v2ray.core.lastDownloadingCoreFailed) frmXray.btnTcping.oncommand();
				return; 
			}
			
			frmXray.autoTesting = true; 
			activeOutbound(idx,address,true,true);
			
			return config.proxy.testInterval*1000;
		} 
	)
}

if(config.proxy.test){
	frmXray.chkAutoTest.checked = true;
	frmXray.chkAutoTest.oncommand();
}

frmXray.chkAutoTest.skin(style.checkBox);


frmXray.enableDpiScaling();
win.loopMessage();